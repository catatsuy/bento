name: Auto Review

on:
  pull_request:

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code with shallow clone
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        fetch-tags: false
    - name: Download bento
      run: |
        # Download and extract the bento binary
        curl -sL https://github.com/catatsuy/bento/releases/latest/download/bento-linux-amd64.tar.gz | tar xz -C /tmp
        sudo mv /tmp/bento /usr/local/bin/

    - name: Fetch necessary commits
      run: |
        # Get base and head commit SHAs from the pull_request event payload
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        echo "Base SHA: ${BASE_SHA}"
        echo "Head SHA: ${HEAD_SHA}"
        # Use the GitHub Compare API to get the merge base commit SHA
        MERGE_BASE_SHA=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/${{ github.repository }}/compare/${BASE_SHA}...${HEAD_SHA}" | jq -r '.merge_base_commit.sha')
        # Exit if the merge base SHA is not found
        if [ "$MERGE_BASE_SHA" = "null" ] || [ -z "$MERGE_BASE_SHA" ]; then
          echo "Error: Could not retrieve merge base commit SHA."
          exit 1
        fi
        echo "Merge base commit SHA: ${MERGE_BASE_SHA}"
        echo "MERGE_BASE_SHA=${MERGE_BASE_SHA}" >> $GITHUB_ENV
        # Fetch the merge base commit if it is not already present in the shallow clone
        git fetch --depth=1 origin ${MERGE_BASE_SHA}

    - name: Check for diffs and set SKIP_REVIEW
      run: |
        # Retrieve the merge base commit SHA from the environment variable
        MERGE_BASE=${{ env.MERGE_BASE_SHA }}
        echo "Using merge base: ${MERGE_BASE}"
        # Generate a diff from the merge base to HEAD
        DIFF_OUTPUT=$(git diff ${MERGE_BASE} ${HEAD_SHA} -- ':!go.sum')
        DIFF_LINES=$(echo "$DIFF_OUTPUT" | wc -l)
        # If no changes are detected, skip review
        if [ -z "$DIFF_OUTPUT" ]; then
          echo "No changes detected, skipping review."
          echo "SKIP_REVIEW=true" >> $GITHUB_ENV
          exit 0
        # If the diff is too large (more than 500 lines), skip review
        elif [ "$DIFF_LINES" -gt 500 ]; then
          echo "Diff too large (${DIFF_LINES} lines), skipping review."
          echo "SKIP_REVIEW=true" >> $GITHUB_ENV
          exit 0
        fi

    - name: Run Review
      if: env.SKIP_REVIEW != 'true'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Use the merge base commit to calculate the diff for review
        MERGE_BASE=${{ env.MERGE_BASE_SHA }}
        git diff ${MERGE_BASE} ${HEAD_SHA} -- ':!go.sum' | bento -model gpt-4.1-mini -review > review.txt
        # Set the review contents as an environment variable
        REVIEW_CONTENT=$(cat review.txt)
        echo "REVIEW_CONTENT<<EOF" >> $GITHUB_ENV
        echo '### Automatic Review' >> $GITHUB_ENV
        echo "$REVIEW_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Find Existing Comment
      if: env.SKIP_REVIEW != 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
          --jq '.[] | select(.user.login == "github-actions[bot]") | select(.body | contains("Automatic Review")) | .id' \
          > comment_id.txt
        if [ -s comment_id.txt ]; then
          echo "comment_id=$(cat comment_id.txt)" >> $GITHUB_ENV
        fi

    - name: Post Review as a Comment
      if: env.SKIP_REVIEW != 'true'
      env:
        GH_TOKEN: ${{ github.token }}
        REVIEW_BODY: ${{ env.REVIEW_CONTENT }}
      run: |
        if [ -n "${{ env.comment_id }}" ]; then
          # Update existing comment
          gh api \
            -X PATCH \
            repos/${{ github.repository }}/issues/comments/${{ env.comment_id }} \
              -f body="${REVIEW_BODY}"
        else
          # Create a new comment
          gh api \
            -X POST \
            repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
              -f body="${REVIEW_BODY}"
        fi
